
know_branch() {
    export BRANCH="$(command git 2>/dev/null branch --list | sed -n 's/^\* //p')" >/dev/null 2>/dev/null
    [[ -r config/database.yml ]] && eval $(perl -ne 'print "export DBNAME=$1\n" if (/^development:/ ... /^\S/) && /^\s+database:\s*(\w+)/' config/database.yml) >/dev/null 2>/dev/null
}  # know_branch


git() {
    local call=git result=0 loopy=

    if [[ "$1" != help && "$2" == help ]]; then
        echo >&2 "You probably mean git $(tput setaf 3)$1 --help ...$(tput sgr0) or $(tput setaf 3)git help $1 ...$(tput sgr0)"
        call= result=1
    elif [[ "$1" == @(huh|status|pull|pulla) ]]; then
        loopy=1
    elif [[ "$1" == branch && $# -eq 1 ]]; then
        loopy=1
    fi

    if [[ "$PWD" == $HOME/tickit && -n "$loopy" ]]; then
        HERE="$PWD"
        OAPP="$APP"
        trap 'cd "$HERE"; [[ -n "$OAPP" ]] && app -n "${OAPP##*/}"' RETURN HUP INT QUIT TERM

        _first=1
        for _d in @(rel-+([0-9])+(.+([0-9]))|tod-+([0-9])*([a-z])); do
            cd "$HERE/$_d" || continue
            ((_first)) || echo
            _first=0
            echo '~/tickit/'"$_d:"
            git "$@" | sed '/./s/^/  /'
            x=$?
            ((result < x)) && result=$x
        done

        return $result
    fi

    case "$1" in
      huh)
        shift
        set -- status "$@" .
        ;;

      pulla)
        shift
        ## command git stash save "preparing to have a big pull"

        command git branch | sed 's/^ /-/' | {
            this=
            while read state name; do
                [[ $state == '*' ]] && this="$name"
                ( command git checkout "$name" && command git pull "$@" )
            done
            [[ -n "$this" ]] && command git checkout "$this" 2>&-
        }

        ## command git stash pop

        call= result=0
        ;;

      branch)
        if [[ "$2" == @(list|merge|merged|track|delete|move|rename) ]]; then
            echo >&2 "Not allowing $(tput setaf 3)git branch $2$(tput sgr0)! Do you mean one of --list --merged --track -d -D -M -m ?"
            call= result=1
        fi
        ;;

      stash)
        if [[ "$2" != @(list|show|drop|pop|apply|branch|save|clear|create) ]]; then
            echo >&2 "Not allowing $(tput setaf 3)git stash$(tput sgr0) without a sub-command! Do you mean list, show or save, or do you mean drop, pop, apply, branch, clear or create?"
            call= result=1
        fi
        ;;
    esac

    if [[ -n "$call" ]]; then
        command $call "$@"
        result=$?
    fi

    know_branch >/dev/null 2>/dev/null
    return $result
}  # git


app() {
    local nflag= vflag= lflag=
    OPTIND=1
    while getopts :lnv ch; do
      case "$ch" in
        l) lflag=1 ;;   # list available apps
        n) nflag=1 ;;   # no move - just echo or set
        v) vflag=1 ;;   # verbalise
        *) echo >&2 "usage: app [-l] [-n] [-v] [branch]"
           return 1 ;;
      esac
    done
    shift $((OPTIND-1))

    if [[ -n "$lflag" ]]; then
        if [[ ! -d ~/tickit ]]; then
            echo >&2 "Cannot find ~/tickit directory"
            return 1
        fi

        ls 2>&- -d ~/tickit/@(rel-+([0-9])+(.+([0-9]))|tod-+([0-9])*([a-z])) | sed 's:.*/::'
        return 0
    fi

    if [[ $# -gt 0 ]]; then
        local vers="$1"
        case "$vers" in
          +([0-9])+(.+([0-9]))) vers="rel-$vers" ;;
          +([0-9])*([a-z]))     vers="tod-$vers" ;;

          -)
            if [[ "$PWD" = ~/tickit/@(rel-+([0-9])+(.+([0-9]))|tod-+([0-9])*([a-z]))?(/*) ]]; then
                local xxx="${PWD#~/tickit/}"
                xxx="${xxx%%/*}"
                git checkout -m "$xxx"
                return
            fi

            echo >&2 "'app -' only works if you are in a ~/tickit project"
            return 1
            ;;
        esac

        export APP=~/tickit/"$vers"
    fi

    [[ -z "$nflag" ]] && cd "$APP" && know_branch >/dev/null 2>/dev/null
    [[ -n "$vflag" ]] && echo "APP = $APP"

    return 0
}  # app


_raily_magic_cd() {
    local top="$1"
    shift
    [[ -z "$APP" ]]          && { echo >&2 "\$APP is not defined"; return 1; }
    [[ -d "$APP/app" ]]      || { echo >&2 "\$APP does not appear to be a Rails project"; return 1; }
    [[ -d "$APP/app/$top" ]] || { echo >&2 "\$APP does not have an app/$top directory";   return 1; }

    cd "$APP/app/$top"
}


M() { _raily_magic_cd models      "$@"; }
V() { _raily_magic_cd views       "$@"; }
C() { _raily_magic_cd controllers "$@"; }


know_branch

