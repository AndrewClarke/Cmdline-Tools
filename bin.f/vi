
function vid {
    vim -d "$@"
}

function vidd {
    for i in "$@"; do
        vim -d "$i" ~-/"$i" || break
    done
}

function vif {
    IFS=$'\n' set -a names -- $(grep -ils "$1" *.org *.src *.trg *.ext)
    vim "+/$1" "${names[@]}"
}

function vig {
    typeset i

    # go looking for the first non-option - to skip possible flags to grep
    for i in "$@"; do
        [[ "$i" != -* ]] && break
    done

    IFS=$'\n' vim "+/$i" $(grep++ -l "$@")
}

function vio {
    vim -o "$@"
}

function viO {
    vim -O "$@"
}

function vit {
    vim -t "$1"
}

function viw {
    vim $(which "$@")
}


function vi {
    # if PWD is inside a $APPL which is also a Rails project:
    #   replace any arg starting with M/ V/ C/ or H/ with $APPL/app/@(models|views|controllers|helpers)
    #   also support L/ or P/ for $APPL/@(lib|public)
    #   to help when lazy-cutting-pasting from diff lines, trim off the leading [ab]/
    #   trim off trailing : for a similar reason
    #   if in a subdirectory but the filename does not exist as-is but exists from the root,
    #   prepend the root (or a bunch of ../ maybe?) to address its true gome.

    local n x reld dotty dotdot common i raily= findim
    [[ -n "$APPL" && -d "$APPL/app" ]] && [[ "$PWD" == "$APPL"?(/*) ]] && raily="${PWD#$APPL/}/"

    # look for arg starting with [MVCHLP]/ and expand it
    typeset -a args
    for i in "$@"; do
        if [[ -n "$raily" && "$i" = [MVCHLP]/* ]]; then
            case "$i" in
              (M/*) i="$APPL/app/models/${i#M/}" ;;
              (V/*) i="$APPL/app/views/${i#V/}" ;;
              (C/*) i="$APPL/app/controllers/${i#C/}" ;;
              (H/*) i="$APPL/app/helpers/${i#H/}" ;;
              (L/*) i="$APPL/lib/${i#L/}" ;;
              (P/*) i="$APPL/public/${i#P/}" ;;
            esac
        elif [[ "$i" = a/* && ! -d a ]]; then       # name selected from a diff header?
            i="${i#a/}"
        elif [[ "$i" = b/* && ! -d b ]]; then       # name selected from a diff header?
            i="${i#b/}"
        fi

        # trim trailing : IF the name doesn't actually exist (but who'd be dumb enough...)
        [[ ! -e "$i" && "$i" = *: ]] && i="${i%:}"

        # look for what appears to be a controller spec selected from a server log
        if [[ -n "$raily" && "$i" =~ ^([_[:alnum:]]+::)*[_[:alnum:]]+(#([_[:alnum:]]+))?$ ]]; then
            act="${BASH_REMATCH[3]}"
            i="$APPL/app/controllers/$(perl -e '$_ = "'$i'"; s!(\w+)::!lc($1) . "/"!eg; s/(?<=\w)([A-Z])/"_" . lc $1/eg; s/#.*//; print lc $_').rb"
            lineno="+1"
            findim="+/^\s*def\s\+$act\>"
        fi

        # if in a rails project, look for a filename that can be resolved from the top
        if [[ -n "$raily" ]] && [[ ! -e "$i" && -e "$APPL/$i" ]]; then
            if [[ "$i" == $raily* ]]; then
                i="${i#$raily}"
            else
                # find common longest directory subsequence of $raily and $i
                reld="$raily" common= x= dotdot= n=0
                while [[ "$i" = "$common$x"* && $n != 20 ]]; do
                    let n+=1
                    common="$common$x"

                    x="${reld#*/}"
                    x="${reld%$x}"
                    reld="${reld#$x}"
                done

                if [[ $n = 20 ]]; then
                    echo >&2 "vi smarties have gone mental"
                    return 1
                fi

                dotty="${raily#$common}" dotdot= n=0
                while [[ -n "$dotty" && $n != 20 ]]; do
                    let n+=1
                    dotty="${dotty#*/}"
                    dotdot="../$dotdot"
                done

                if [[ $n = 20 ]]; then
                    echo >&2 "vi smarties have gone mental"
                    return 1
                fi

                i="$dotdot${i#$common}"
            fi
        fi

        args+=("$i")
    done
    set -- "${args[@]}"

    vim $lineno $findim "$@"
}

