#!/usr/bin/env perl
# Copyright (C) 1992-2012 Andrew Clarke
# Free to a good home.
$0 =~ s:.*/::;		# tidy up the program name

use 5.8.0;              # should be sufficient
use strict;
use warnings;
no warnings 'uninitialized';
use re 'eval';

my ($pattern, @patterns, $split, @F);
my (@prefix, @postfix);
our ($smfn, $rmfn, $smso, $rmso);
my $exit = 1;

# TODO: the consumption of flags has accelerated at an alarming rate.
# It's time to start considering long options and retiring some shorts.
#
# flags: e:f:#BFHLchilnqstvx0:
our ($contFlag, $ncount, $pcount, $_0flag);
our ($aflag, $Aflag, $cflag, $Cflag, $Dflag, $Fflag, $Gflag, $hflag, $Hflag, $iflag, $Iflag);
our (@jflag, $lflag, $Lflag, $nflag, $qflag, $sflag, $tflag, $vflag, $xflag, $Xflag, $Zflag);
our $jflag;

my $isWin = $^O =~ /Win/i;
my $pathSep = $isWin ? ';' : ':';
my $dirSep = $isWin ? '\\' : '/';

sub usage {
    my $helping;
    if($helping = $_[0] eq -helping)
        { shift }
    else
	{ select STDERR };

    print "$0: @_\n" if @_;

    if(! $helping) {
        print "See $0 -? for full usage\n";
    }
    else {
      print <<MESSAGE;

$0 FLAGS [-e pattern [-e pattern]... | -f pattern_file | pattern] [file...]

FLAGS:	-c	count matching lines
        -l	list files containing a match
        -q	just test matching status without printing
        -Z	Apply \$GREPPP_OPTS as if typed on command line
        	IF \$GREPPP_OPTS starts with -Z then it is auto-applied
        -0ooo	set line terminator to oct(ooo)

        -I file file supplies list of input files: may use - for STDIN
        -D      treat arguments as \$PATH type lists. Search all files found.
        -h	don't print file name in front of matching lines
        -H	print file name even if only one file listed
        -G      group lines from same file with separating blank line.
              - use single -G to print a blank between each file
              - use -GG to smartly bunch lines from contiguous sets of single
                lines. Umm, try it to make sense of this poor explanation.
        -s	be silent about unreadable or missing files
        -t	ignore non-text files only (takes a damn good guess)

        -a	AND - all expressions must match (default behaviour is OR)
        -B	compress blanks and remove leading and trailing blanks
        -#	delete #comments first (doesn't understand strings (YET))
        -\\	recognise continuation lines in source and glue together
        -j expr execute Perl expression to join lines into one masse
        -J file execute Perl code in file to join lines into one masse
        -{      delete {comments} first (doesn't understand strings (YET))
        -F	split multiple patterns at newline, and ignore magic chars
        -L      highlight matching text (experimental)
        -i	ignore upper/lower case distinctions
        -n	print line number of matching lines
        -N	print line number of matching lines as file[lineno]
        -v	invert the sense of a match - even behaves properly with -[clq]
          TODO: make it possible to invert individual patterns (see -e and -a)
        -x	lines must match exactly - implicit ^pattern\$
        -X      extract match - print each match on one line (NI)
        -p expr	execute Perl expression prior to matching
        -P file	execute Perl expressions in file prior to matching
        -o expr	execute Perl expression prior to output
        -O file	execute Perl expressions in file prior to output
        -S pat  split line with pat to \@F and treat patterns as boolan exprs
        +<nxt>  print <nxt> lines after matching line
        -<pre>  print <pre> lines before matchine line
	-A      annotate context lines from +digits or -digits

        -C[#]	print first N lines matching per file (default 1).

Features marked (NI) are not implemented (or not properly)

Many of the flags (hopefully all the relevant ones) support use of +X to switch
off the setting. This allows you to override the options in \$GREPPP_OPTS. Use of
+Z in particular switches off \$GREPPP_OPTS containing -Z - but you must use it
as the first option and not bundled.

-E and -b flags of grep and egrep are not supported - grepp goes way beyond -E
and who cares about -b? Any {comments} are only recognised on one line. To do
more would require building a smarter state machine into $0. -{ understands
Wacro ie it knows that \@{something} is not a comment.

If -n or +n is given, the other one is assigned the same value unless you
explicitly give it a value or put ! on the end of the one value you give.

-D uses the platform-specific path separator character to suit your O/S.
-D makes -I assume all lines from specified file are also \$PATH type values.

-C is new, and:
  may not work with -v
  may need to be exclusive with other flags I haven't considered
  may not work with other flags I haven't considered

-X is new, and:
  may not work with many flags...
  should be exclusive with several other flags...
MESSAGE
    }

    exit 2;
}   # usage


sub Options {
    my $OPTARG;
    my $depth = undef;      # help to collect precedented expressions

    $vflag = 0;

    $_ = $ENV{GREPPP_OPTS};
    if($ARGV[0] ne '-Z' && s/^-?Z//) {
        $Zflag++;
        foreach (split / /) {
            s/^/-/ unless /^[-+]/;
            unshift @ARGV, $_;
        }
    }

    while($ARGV[0] =~ /(?:^[][(){}]$)|(?:^[-+])/) {
        $_ = shift @ARGV;
        last if $_ eq '--';

        if(/[[({]/) {
            ++$depth;
            next;
        }

        if(/[])}]/) {
            --$depth;
            next;
        }

        s/^(.)//;
        my $op = $1;
        my $val = $op eq '-' ? 1 : 0;

        while($_) {
            s/^(.)//;
            my $ch = $1;	# parameter or remaining flags are in $_

            if($val) {	# collect options which REQUIRE leading -
                $OPTARG = $_ || shift @ARGV if $ch =~ /[I0efpPjJoOS]/;

                $Iflag  = $OPTARG, last if $ch eq 'I';
                $_0flag = $OPTARG, last if $ch eq '0';
                $split  = $OPTARG, last if $ch eq 'S';

                $Gflag = $Gflag ? 'smart' : 'dumb', next if $ch eq 'G';
                $Cflag = s/^(\d+)// ? $1 : 1,       last if $ch eq 'C';

                push(@patterns, $OPTARG), last if $ch eq 'e';
                push(@prefix,   $OPTARG), last if $ch eq 'p';
                push(@jflag,    $OPTARG), last if $ch eq 'j';
                push(@postfix,  $OPTARG), last if $ch eq 'o';

                push(@prefix, 's/#.*//'),                       next if $ch eq '#';       # {
                push(@prefix, 's/(?<!@){[^}]*}/ /g'),           next if $ch eq '{';
                push(@prefix, 's/^\s+//; s/\s+/ /g; s/\s*$//'), next if $ch eq 'B';

                if($ch eq 'f') {
                    open FFD, $OPTARG or die "$0: cannot open $OPTARG: $!\n";
                    chomp, push @patterns, $_ while <FFD>;
                    close FFD;
                    last;
                }

                if($ch eq 'P') {
                    open FFD, $OPTARG or die "$0: cannot open $OPTARG: $!\n";
                    push @jflag, <FFD>;
                    close FFD;
                    last;
                }

                if($ch eq 'J') {
                    open FFD, $OPTARG or die "$0: cannot open $OPTARG: $!\n";
                    chomp, push @prefix, $_ while <FFD>;
                    close FFD;
                    last;
                }

                if($ch eq 'O') {
                    open FFD, $OPTARG or die "$0: cannot open $OPTARG: $!\n";
                    chomp, push @postfix, $_ while <FFD>;
                    close FFD;
                    last;
                }

                if($ch eq 'Z') {
                    unless($Zflag++) {  # apply it first time only
                        # push back any unconsumed options
                        unshift @ARGV, "-$_" if $_;
                        if($_ = $ENV{GREPPP_OPTS}) {
                            foreach (split / /) {
                                s/^/-/ unless /^[-+]/;
                                unshift @ARGV, $_;
                            }
                        }
                    }

                    last;
                }
            }

            if($ch =~ /[1-9]/) {
                $ch .= $1 while s/^(\d)//;
                ($val ? $pcount : $ncount) = $ch + 0;

                if(s/^!//) {
                  $ncount = 0 if   $val && ! defined $ncount;
                  $pcount = 0 if ! $val && ! defined $pcount;
                }
                next;
            }

            $nflag = $val ? 'n' : '', next if $ch eq 'n';
            $nflag = $val ? 'N' : '', next if $ch eq 'N';

            $Aflag = $val, next if $ch eq 'A';
            $Dflag = $val, next if $ch eq 'D';
            $Fflag = $val, next if $ch eq 'F';
            $Hflag = $val, next if $ch eq 'H';
            $Lflag = $val, next if $ch eq 'L';
            $Xflag = $val, next if $ch eq 'X';

            $aflag = $val, next if $ch eq 'a';
            $cflag = $val, next if $ch eq 'c';
            $hflag = $val, next if $ch eq 'h';
            $iflag = $val, next if $ch eq 'i';
            $lflag = $val, next if $ch eq 'l';
            $qflag = $val, next if $ch eq 'q';
            $sflag = $val, next if $ch eq 's';
            $tflag = $val, next if $ch eq 't';
            $vflag = $val, next if $ch eq 'v';
            $xflag = $val, next if $ch eq 'x';

            $contFlag = $val, next if $ch eq "\\";

	    usage -helping if "$op$ch" eq '-?';
            usage "unknown flag: $op$ch";
        }
    }

    if($depth) {
        usage "use of bracketing in expression list is not balanced";
    }

    push @patterns, shift @ARGV unless @patterns || ! @ARGV;

    if(defined $pcount or defined $ncount) {
	$pcount = $ncount unless defined $pcount;
	$ncount = $pcount unless defined $ncount;
    }
    elsif($Aflag) {
	usage "-A only valid with -digits or +digits";
    }

    # following is HARMLESS ACTUALLY, but annoying to get the complaint when using $GREPPP_OPTS
    #sage "-L and -[clv] are mutually exclusive"               if $Lflag && ($cflag || $lflag || $vflag);
    # so... clear the Lflag if -c, -l or -v is set
    $Lflag = 0 if $cflag || $lflag || $vflag;

    usage "-n and -[clq] are mutually exclusive"   if $nflag && length "$cflag$lflag$qflag";
    usage "-c and -[Clq] are mutually exclusive"   if $cflag && length "$Cflag$lflag$qflag";
    usage "-H and -h are mutually exclusive"       if $hflag && $Hflag;

    # soon my pretties: -L with -a is now happy...
    usage "-L and -S are mutually exclusive (without work)"    if $Lflag && $split;

    usage "-I and list of filenames are mutually exclusive"    if $Iflag && @ARGV;
    usage "patterns expected" unless @patterns;

    if($Lflag) {
        $smfn = `tput setaf 3`;
        $rmfn = `tput sgr0`;
        $smso = `tput setaf 6`;
        $rmso = `tput sgr0`;
    }

    if($Fflag) {	# like dumb old fgrep
        # split all patterns at a newline character
        my @pats = @patterns;
        @patterns = ();

        foreach my $i (@pats) {
            foreach (split /\n/, $i) {
                next unless $_;
                s/(\W)/\\$1/g;		# escape all magic chars
                push @patterns, $i;
            }
        }
    }

    if(!$aflag && !$split) {
        # protect each component pattern from its compatriots (precedence)
        foreach my $pat (@patterns)
            { $pat = "(?:$pat)" }

        $pattern = join '|', @patterns;
        $pattern = "^($pattern)\$" if $xflag;
    }

    if(defined $_0flag) {
        $_0flag = $_0flag =~ /^([0-8]+)$/ ? oct($1) : ord($1);
    }

}   # Options


my @blue;       # colour the matched parts if -L
sub match_a_line() {
    my ($match, $pat, $elmatcho, $p);

    @blue = ();
    if($split) {
        @F = split $split;

        foreach $pat (@patterns) {
            $match = eval $pat;         # TODO precompile to sub refs
            $@ and die "$0: bad-expr: $pat\n$@\n";
            last if $aflag && !$match || !$aflag && $match;
        }
    }
    elsif($aflag) {             # AND all patterns
        $match = 1;

        foreach $pat (@patterns) {
            if(! $Lflag) {
                $elmatcho = $iflag ? /$pat/i : /$pat/
            }
            else {
                $elmatcho = 0;
                while($iflag ? /(?{$p = pos})$pat(?{push @blue, [$p, pos]})/gi
                             : /(?{$p = pos})$pat(?{push @blue, [$p, pos]})/g) {
                    $elmatcho = 1;
                }
            }

            if(! $elmatcho) {
                $match = 0;
                @blue = ();
            }

            last unless $match;
        }

        if($match && $Lflag) {
            # sort and merge the marked areas
            @blue = sort { $a->[0] <=> $b->[0] || $a->[1] <=> $b->[1] } @blue;

            my $i = 0;
            while($i < $#blue) {
                if($blue[$i]->[1] < $blue[$i + 1]->[0]) {
                    ++$i;
                }
                else {
                    $blue[$i]->[1] = $blue[$i + 1]->[1];
                    splice @blue, $i + 1, 1;
                }
            }
        }
    }
    elsif($Lflag) {
        while($iflag ? /(?{$p = pos})$pattern(?{push @blue, [$p, pos]})/gio
                     : /(?{$p = pos})$pattern(?{push @blue, [$p, pos]})/go) {
            $match = 1;
        }
    }
    elsif($/ eq '\n') {
        $match = 1 if $iflag ? /$pattern/gio : /$pattern/go;
    }
    else {
        $match = 1 if $iflag ? /$pattern/gmio : /$pattern/gmo;
    }

    return $match;

}   # match_a_line


sub enque(\@$) {
    my $aref = shift;
    local $_ = shift;
    shift @$aref while @$aref > 0 && @$aref >= $pcount;
    push @$aref, $_ if $pcount;
}


my $printed;
my $FD;
my $lineno;
my ($ofname, $gbundled);   # used by -G processing

sub process ($$) {
    (my $fname, $FD) = @_;

    my ($nextra, $count, $line) = (0, 0, 0);
    my ($last, $match, $prefix, $enque, @queue);
    my $Gline;     # used by -G processing

    $lineno = 0;


    sub getline {
        my $x = <$FD>;
        return undef unless $x;
        ++$lineno;
        $_ .= $x;
        return $_;
    }

    local $/ = $/;
    $/ = chr $_0flag if defined $_0flag;

    LINE: while(($_ = ''), getline) {
	$enque = 1;

	# gather up continuation lines if command flag says to
        # TODO: a pattern to recognise continuation lines would be cool...
        #
        if($contFlag) {
            while(/\\$/) {
                getline || last;
            }
        }
        elsif($jflag) {
            my $ff = 0;
            while(&$jflag) {
                $ff = 1;
                getline || last;
            }
        }

        chomp;
        $line = $_;	# save the unadulterated line. pattern matching may do damage to $_

        foreach my $expr (@prefix) {
            eval $expr;
            $@ and die "$0: sick pre-expr: $expr\n$@\n";
        }

        $match = match_a_line;

	# under -v with (-q or -l) will consider success if NO matches ie $count == 0
	# filename or exit status will be emitted after the end of the LINE loop
	#
        if($vflag && ($qflag || $lflag)) {
            ++$count if $match;
	    next LINE;
	}

	# a quick exit status for a positive match with -q
	exit 0 if $qflag && $match;

	if($match != $vflag) {
            $exit = 0 if $exit == 1;		# ultimately success if we get a match and no other errors

	    ++$count;
	    next LINE if $cflag;

	    if($lflag) {
		print "$fname\n";
		last LINE;
	    }
	}

	$prefix = '';
	unless($hflag) {
	    $prefix .= "$smfn$fname";
	    $prefix .= ':' unless $nflag eq 'N';
	}

	if($nflag) {
	    $prefix .= '[' if $nflag eq 'N';
	    $prefix .= $lineno;
	    $prefix .= ']' if $nflag eq 'N';
	    $prefix .= ':' if $nflag ne 'N';
	}

	$prefix .= "$rmfn " unless $hflag;

	if($Aflag && ($pcount || $ncount)) {
	    $prefix .= $match != $vflag ? '@' : ' ';
	}

        if($match != $vflag or $nextra > 0) {
	    $enque = 0;
            unless($Lflag) {
                $_ = $line;
            }
            else {
	        # highlighting crap
                $_ = '';
                my ($p, $lo, $hi) = 0;

                while(my $n = shift @blue) {
                    ($lo, $hi) = @$n;
                    $_ .= substr($line, $p, $lo - $p) . $smso . substr($line, $lo, $hi - $lo) . $rmso;
                    $p = $hi;
                }

                $_ .= substr($line, $p);
            }

            foreach my $expr (@postfix) {
                eval $expr;
                $@ and die "$0: sick post-expr: $expr\n$@\n";
            }

            if($match != $vflag)
		{ $nextra = $ncount }
            else
		{ --$nextra }

            if($Gflag && $printed && $ofname && ! $last) {
                print "\n";
            }

	    if($Aflag && (defined($last) || $printed) && @queue && $last + $pcount < $lineno - 1) {
		my $ch = defined $last ? '-' : '=';
		print '  ', $ch x 40, "\n";
	    }

            print "$_$/" foreach @queue;
	    @queue = ();
            print "$prefix$_";
            print $/ if $/ eq "\n" || ! /^\s*$/;
	    $last = $lineno;
	    $printed = 1;

	    last LINE if $Cflag && $count >= $Cflag && $nextra == 0;
        }
    }
    continue {
	# stash lines that might be needed for -<num> context printing
	if($enque && ! ($cflag || $qflag || $lflag)) {
	    enque @queue, "$prefix$line";
	}
    }

    if($cflag) {
        if($count) {
            print "$fname:" unless $hflag;
            print "$count\n";
        }
    }
    elsif($Gflag) {
    }

    # under -v with (-q or -l) we only consider success if NO matches ie $count == 0
    if($count == 0 && $vflag && ($qflag || $lflag)) {
        exit 0 if $qflag;	# not sure if this should be after ALLLLL files
        print "$fname\n";
    }

    # Can now record the old filename. Helps -G by acting as a switch
    # (and it might become useful as a string too)
    #
    $ofname = $fname;

}   # process


sub oneFile ($) {
    my $fname = shift;

    stat $fname;

    unless(-r _) {
        $exit = 2;
        warn "$0: cannot access $fname: $!\n" unless $sflag;
        return;
    }

    return if $tflag && ! -T $fname;

    if(-d $fname) {
        warn "$0: $fname: Is a directory\n" unless $sflag;
        return;
    }

    if(open FFD, '<', $fname) {
        process $fname, \*FFD;
        close \*FFD;
    }
    else
        { warn "$0: cannot open $fname: $!\n" unless $sflag }

}   # oneFile


sub oneIndirect ($) {
    my $name = $_[0];

    if($name eq '-')
	{ *IFD = *STDIN }
    else
	{ open IFD, '<', $name or die "cannot open $name: $!\n" }

    if($Dflag) {
        my $path;
        onePath $path while $path = <IFD>;
    }
    else {
        my $file;
        oneFile $file while $file = <IFD>;
    }
}   # oneIndirect


my %visited;
sub onePath ($) {
    my $path = $_[0];

    PIECE: foreach my $dir (split /:/, $path) {
        next PIECE if $visited{$dir}++;

        unless(opendir DFD, $dir) {
            warn "$0: cannot open directory $dir: $!\n" unless $sflag;
            next PIECE;
        }

        while(my $fname = readdir DFD) {
            next if '.' eq substr $fname, 0, 1;
            local $sflag = 1;
            oneFile "$dir$dirSep$fname";
        }

        closedir DFD;
    }

}   # onePath


Options;
if(@jflag) {
    $_ = join ';', @jflag;
    $jflag = eval "sub { $_ }";
    $@ and die "$0: bad-expr for -j or -J $_\n$@\n";
}


if($Iflag) {
    oneIndirect $Iflag;
}
elsif(! @ARGV) {
    if($Dflag) {
        oneIndirect '-';
    }
    else {
        $hflag = ! $Hflag unless defined $hflag;
        process 'stdin', \*STDIN;
    }
}
else {
    $hflag = 1 if ! defined $hflag and ! $Hflag && @ARGV == 1;
    ARG: foreach my $file (@ARGV) {
        if($Dflag)
            { onePath $file }
        elsif($file eq '-')
            { process 'stdin', \*STDIN }
        else
            { oneFile $file }
    }
}

exit $exit;

