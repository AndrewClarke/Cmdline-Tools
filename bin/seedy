#!/bin/ksh

function usage {
   [[ $# -gt 0 ]] && echo >&2 "$@"

   echo >&2 "usage: $0 [-f | -m | -r] [-t]

where:  -f  full: rollback, migrate and re-seed
        -r  rollback only (STEP=n supported)
        -m  migrate only
        -t  pass --trace option to db:seed

Without -f, only runs 'rake db:migrate' && 'rake db:seed'
-f, -m and -r are mutually exclusive.

default option is now -m, 'cos the db:seed step is unwelcome.
"
   exit 1
}


fflag= mflag= rflag= tflag=
while getopts :fmrt ch; do
    case "$ch" in
      f) fflag=f ;;
      m) mflag=1 ;;
      r) rflag=1 ;;
      t) tflag=--trace ;;
      *) usage ;;
    esac
done
shift $((OPTIND-1))

case "$fflag$mflag$rflag" in
  *f*) usage "use of -f is now horribly passÃ©";;
  ??*) usage ;;
  '') mflag=1 ;;
esac


function bek {
  bundle exec rake "$@"
}

if [[ -z "$APPL_TOP" ]]; then
    echo >&2 "Cannot find \$APPL_TOP environment variable"
    return 1
fi

if [[ -z "$APPL" ]]; then
    echo >&2 "Cannot find \$APPL environment variable"
    return 1
fi

if [[ "$PWD" != "$APPL"?(/*) ]]; then
    echo >&2 "Can only be seedy inside an application directory"
    return 1
fi


cd "$APPL"

case "${mflag:+m}${rflag:+r}${fflag:+f}" in
  m)  bek $tflag db:migrate ;;
  r)  bek $tflag db:rollback "$@" ;;
  '') bek $tflag db:migrate && bek --trace db:seed ;;

  f)
    last_mig="$(ls "$APPL/db/migrate" | tail -1)"

    if [[ "$last_mig" != *_survey?(s)_* ]]; then
        echo "CAN'T BE SEEDY - last migration is not about surveys"
        echo "  $last_mig"
        return 1
    fi

    nthings=$(ls "$APPL/db/migrate"/*_survey?(s)_* | wc -l)

    bek $tflag db:migrate && bek $tflag db:rollback STEP=$nthings && { [[ -n "$rflag" ]] || { bek $tflag db:migrate && bek --trace db:seed; }; }
    ;;
esac

