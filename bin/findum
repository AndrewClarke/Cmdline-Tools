#!/bin/bash

shopt -s extglob

usage() {
    [[ $# -gt 0 ]] && echo >&2 "ERROR: $@"

    echo >&2 "\
usage: $0 [-adlpvMVCHPTQ] [-- grep++-flags ] pattern
where   -a include more \$RAILS_ROOT top-level directories

        -d  include \$RAILS_ROOT/db directory
        -l  include \$RAILS_ROOT/lib in search
        -p  include \$RAILS_ROOT/public in search
        -t  include \$RAILS_ROOT/test in search
        -v  include \$RAILS_ROOT/vendor in search

        -M  only \$RAILS_ROOT/app/models
        -V  only \$RAILS_ROOT/app/views
        -C  only \$RAILS_ROOT/app/controllers
        -H  only \$RAILS_ROOT/app/helpers
        -L  only \$RAILS_ROOT/app/lib
        -P  only \$RAILS_ROOT/public
        -T  only \$RAILS_ROOT/test

        -Q  query directories about to be hunted

-[MVCHLPT] don't play well with -a, but can combine with -d, -l, -p, -t and -v.

Currently, the following flags are passed through to grep++:
      -[ABcFGhinNqstxXZ]
"

    exit 1
}


opts= aflag= dflag= lflag= pflag= tflag= vflag= Mflag= Vflag= Cflag= Hflag= Pflag= Tflag= Qflag=
# for convenience, a bunch of options without arguments are collected and passed on to grep++.

OPTIND=1
while getopts :adlptvMVCHLPQTABcFGhinNqsxXZ ch; do
    case "$ch" in
      a) let aflag++ ;;
      d) dflag=1 ;;
      l) lflag=1 ;;
      p) pflag=1 ;;
      t) tflag=1 ;;
      v) vflag=1 ;;

      M) Mflag=1 ;;
      V) Vflag=1 ;;
      C) Cflag=1 ;;
      H) Hflag=1 ;;
      L) Lflag=1 ;;
      P) Pflag=1 ;;
      T) Tflag=1 ;;

      Q) Qflag=1 ;;

      [ABcFGhinNqstxXZ]) opts="-${opts#-}$ch" ;;

      ?) [[ "X$OPTARG" == 'X?' ]] && usage
         usage "invalid flag: $OPTARG"
         ;;
    esac
done
shift $((OPTIND-1))
[[ $# -gt 0 ]] || usage "grep++ pattern expected"

[[ -n "$Mflag$Vflag$Cflag$Hflag$Lflag$Pflag$Tflag" && -n "$aflag" ]] && usage "-a cannot combine with -M, -V, -C, -H, -L, -P or -T"
[[ -n "$dflag$lflag$pflag$tflag$vflag" && "$aflag" -gt 1 ]] && usage "double use of -a precludes use of -d, -l, -p, -t and -v"


typeset -a dirs
if [[ -z "${APPL:=$RAILS_ROOT}" ]]; then
    # give up and do all subdirectories if not in a Rails project
    dirs=(*/)
else
    cd "$APPL"
    if [[ -n "$aflag" ]]; then
        # beware - a NOT pattern!
        dirs=(!(data|db|lib|log|public|script|spec|test|tmp|vendor)/)
        (( $aflag > 1 )) && dirs+=(db/ lib/ public/ script/ spec/ test/ vendor/)
    elif [[ -z "$Mflag$Vflag$Cflag$Hflag$Lflag$Pflag$Tflag" ]]; then
        # beware - a NOT pattern!
        dirs=(!(data|db|lib|log|public|script|spec|test|tmp|vendor)/)
    else
        [[ -n "$Mflag" ]] && dirs+=(app/models/)
        [[ -n "$Vflag" ]] && dirs+=(app/views/)
        [[ -n "$Cflag" ]] && dirs+=(app/controllers/)
        [[ -n "$Hflag" ]] && dirs+=(app/helpers/)
        [[ -n "$Lflag" ]] && dirs+=(lib/)
        [[ -n "$Pflag" ]] && dirs+=(public/)
        [[ -n "$Tflag" ]] && dirs+=(test/)
    fi

    [[ -n "$dflag" ]] && dirs+=(db/)
    [[ -n "$lflag" ]] && dirs+=(lib/)
    [[ -n "$pflag" ]] && dirs+=(public/)
    [[ -n "$tflag" ]] && dirs+=(test/)
    [[ -n "$vflag" ]] && dirs+=(vendor/)
fi

if [[ -n "$Qflag" ]]
  then echo "${dirs[@]%/}"
  else find "${dirs[@]%/}" -type f ! -name '*.pdf' ! -name '*.png' ! -name '*.jpg' -print0 | xargs -0 grep++ -Lsti --nahhh $opts "$@"
fi
exit 0

