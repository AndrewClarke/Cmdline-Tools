#!/bin/ksh

usage() {
    echo >&2 "\
usage: $0 [-d database] [options] stringy
       $0 [-d database] [options] Constructed

General options:
    -d  overrides the chosen database, default is \${DBNAME:=mysql}
    -S  skip <n> records
    -L  limit to <n> records
    -v  verbose - show SQL but do not execute
    -q  mad-quote most identifiers to avoid keyword clash

    --batch  pass --batch to mysql (default; switch off with --no-batch)
    --table  pass --table to mysql (default; switch off with --no-table)

NOTE: MySQL fans can use -L n,m and it will insert a plain LIMIT clause.

The final select can be supplied either with a literal select statement
(do not write the SELECT keyword), or constructed using short-form options.

Constructed queries can use the following options:

    [-D] -t tabname(s) [-j tab1:tab2]... [-I id] [-V] [-w "where"] [-g "group"] [-h "having"] [-o "order"] [-c] [fields]

where   -D  DISTINCT
        -t  mandatory table names, comma separated
        -w  where clause without the WHERE
        -I  WHERE id=val; WHERE id in (list)
        -c  count(*)
        -g  GROUP BY expressions, comma separated
        -h  HAVING expression
        -o  ORDER BY fields, comma separated
        -j: tab1:tab2 - join tab1.tab2_id = tab2.id - Many -j may be given

        -V  assuming a temporal table, select only valid rows

Only -D, -S and -L flags are allowed if providing a string.

-c without -D excludes a field list.
-c with -D requires a field list, for count(distinct fields).
"
    exit 1
}


: ${DBNAME:=mysql}
unset vflag Vflag Sflag Lflag Dflag tflag gflag oflag cflag qflag
typeset -a wflag hflag Iflag jflag
batch_flag=--batch
table_flag=--table

OPTIND=1
while getopts :DvVd:cg:h:I:j:L:o:qS:t:w:-: ch; do
    case "$ch" in
      D) Dflag='distinct ' ;;
      v) vflag=1 ;;
      q) qflag=1 ;;
      V) Vflag=1 ;;
      c) cflag=1 ;;
      d) DBNAME="$OPTARG" ;;
      g) gflag="$OPTARG" ;;
      L) Lflag="$OPTARG" ;;
      o) oflag="$OPTARG" ;;
      S) Sflag="$OPTARG" ;;
      t) tflag="$OPTARG" ;;

      h) hflag+=("$OPTARG") ;;
      w) wflag+=("$OPTARG") ;;
      I) Iflag+=("$OPTARG") ;;
      j) jflag+=("$OPTARG") ;;

      -)
        case "$OPTARG" in
          batch) batch_flag=--batch ;;
          table) table_flag=--table ;;
          no-batch) batch_flag= ;;
          no-table) table_flag= ;;
          *) usage "Invalid option: --$OPTARG" ;;
        esac ;;

      *) usage ;;
    esac
done
shift $((OPTIND-1))

[[ -z "$tflag" && -n "$cflag$Vflag$wflag$gflag$hflag$oflag" ]] && usage Bad combination of flags
if [[ -n "$cflag" ]]; then
  [[ -z "$Dflag" && $# -gt 0 ]] && usage Cannot use -c with a field list unless also using -D
  [[ -n "$Dflag" && $# -eq 0 ]] && usage Cannot use -c and -d without a field list
fi

[[ -n "$Vflag" ]] && wflag+=("valid_to is null")

# sort out the -S and -L flags
LIMIT=
case "${#Sflag} ${#Lflag}" in
  0\ 0) : ;;
  *\ 0) LIMIT=" limit $Sflag,18446744073709551615" ;;
  0\ *) LIMIT=" limit $Lflag" ;;
  *\ *) LIMIT=" limit $Sflag,$Lflag" ;;
esac

# support commenting bits out from the command line for convenience
typeset -a things=()
for i in "${@//\{*([^\}])\}/}"; do [[ -n "$i" ]] && things+=("$i"); done
set -- "${things[@]}"

# convert -I items to proper expressions
# multiple items listed are turned into an IN expression
typeset -a things=()
for i in "${Iflag[@]}"; do
    things+=(${i//+([\ ,])/ })
done

case "${#things[*]}" in
  0) : ;;

  1) typeset -a wflag=("id=$things" "${wflag[@]}") ;;

  *) i="${things[*]}"
     typeset -a wflag=("id in (${i// /,})" "${wflag[@]}") ;;
esac

# -j: tab1:tab2 - join tab1.tab2_id = tab2.id - Many -j may be given
for i in "${jflag[@]}"; do
    i="${i/@([a-zA-Z_]*([a-zA-Z_0-9])):@([a-zA-Z_]*([a-zA-Z_0-9]))s/\1.\3_id = \3s.id}"

    if [[ -n "$qflag" ]]; then
        # wrap words with ` to ward off ambiguity
        i="${i//@([a-zA-Z_]*([a-zA-Z_0-9]))/\`\1\`}"
        i="${i//@(\`id\`)/id}"
    fi

    wflag+=("$i")
done


# build up the select statement
if [[ -z "$tflag" ]]; then
    SELECT="$*"
    [[ -z "$SELECT" ]] && usage Missing SELECT body
else
    SELECT=
    if [[ -n "$cflag" ]]; then
        SELECT='count(*)'
    fi

    for i in "$@"; do
        # optionally add a comma
        [[ -n "$SELECT" && "$SELECT" != *, ]] && SELECT="$SELECT,"
        [[ -n "$SELECT" ]] && SELECT="$SELECT "

        # support short-form for giving an alias
        i="${i//:/ as }"

        if [[ -n "$qflag" ]]; then
            # wrap words with ` to ward off ambiguity
            i="${i//@([a-zA-Z_]*([a-zA-Z_0-9]))/\`\1\`}"
            i="${i//@( \`[aA][sS]\` )/ as }"
        fi

        SELECT="$SELECT$i"
    done
    [[ -z "$SELECT" ]] && SELECT='*'

    where=
    case ${#wflag[*]} in
      0) : ;;
      1) where="and ${wflag[*]}" ;;
      *) where="${wflag[*]//@(*)/and (\1)}" ;;
    esac

    having=
    case ${#hflag[*]} in
      0) : ;;
      1) having="and ${hflag[*]}" ;;
      *) having="${hflag[*]//@(*)/and (\1)}" ;;
    esac

    # support short-form for giving an alias on the tables
    tflag="${tflag//:/ as }"
    if [[ -n "$qflag" ]]; then
        # wrap words with ` to ward off ambiguity
        tflag="${tflag//@([a-zA-Z_]*([a-zA-Z_0-9]))/\`\1\`}"
        tflag="${tflag//@( \`[aA][sS]\` )/ as }"
    fi

    SELECT="$SELECT from $tflag${where/#and / where }${gflag:+ group by $gflag}${having/#and / having }${oflag:+ order by $oflag}"
fi

echo select "$Dflag$SELECT$LIMIT;" | if [[ -n "$vflag" ]]; then cat; else mysql -D $DBNAME $batch_flag $table_flag; fi

